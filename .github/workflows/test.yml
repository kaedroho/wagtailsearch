name: Test Modelsearch

on:
  push:
    branches:
      - main
      - "stable/**"

  pull_request:

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - database: sqlite
            backend: db
          - database: postgresql
            backend: db
          - database: mysql
            backend: db
          - database: mariadb
            backend: db
          - database: sqlite
            backend: elasticsearch7
          - database: sqlite
            backend: elasticsearch8
          - database: sqlite
            backend: opensearch1
          - database: sqlite
            backend: opensearch2

    services:
      postgresql:
        image: postgres:17
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mariadb:
        image: mariadb:11
        env:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: testdb
        ports:
          - 3307:3306
        options: >-
          --health-cmd "healthcheck.sh --connect --innodb_initialized"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch7:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9207:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep 'status' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      elasticsearch8:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.2
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9208:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep 'status' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      opensearch1:
        image: opensearchproject/opensearch:1.3.11
        env:
          discovery.type: single-node
          OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9211:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep 'status' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      opensearch2:
        image: opensearchproject/opensearch:2.11.0
        env:
          discovery.type: single-node
          OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9212:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep 'status' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Wait for Search Engines
        if: contains(matrix.backend, 'elasticsearch') || contains(matrix.backend, 'opensearch')
        run: |
          PORT=9200
          case "${{ matrix.backend }}" in
            elasticsearch7) PORT=9207 ;;
            elasticsearch8) PORT=9208 ;;
            opensearch1) PORT=9211 ;;
            opensearch2) PORT=9212 ;;
          esac

          echo "Waiting for ${{ matrix.backend }} on port $PORT..."
          for i in {1..24}; do
            if curl -s "http://localhost:$PORT/_cluster/health" | grep -q '"status"'; then
              echo "${{ matrix.backend }} is ready!"
              exit 0
            fi
            echo "Still waiting for ${{ matrix.backend }} ($i/24)..."
            sleep 5
          done

          echo "${{ matrix.backend }} did not start in time!"
          exit 1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

          case "${{ matrix.backend }}" in
            elasticsearch7) pip install "elasticsearch>7,<8" ;;
            elasticsearch8) pip install "elasticsearch>8,<9" ;;
            opensearch1|opensearch2) pip install "opensearch-py" ;;
          esac

      - name: Run tests
        run: |
          if [[ "${{ matrix.database }}" == "postgresql" ]]; then
              export DATABASE_URL="postgresql://user:password@localhost:5432/testdb"
          elif [[ "${{ matrix.database }}" == "mysql" ]]; then
              export DATABASE_URL="mysql://root:root@127.0.0.1:3306/testdb"
          elif [[ "${{ matrix.database }}" == "mariadb" ]]; then
              export DATABASE_URL="mysql://root:root@127.0.0.1:3307/testdb"
          fi

          if [[ "${{ matrix.backend }}" == "elasticsearch7" ]]; then
            export ELASTICSEARCH_URL="http://localhost:9207"
          elif [[ "${{ matrix.backend }}" == "elasticsearch8" ]]; then
            export ELASTICSEARCH_URL="http://localhost:9208"
          elif [[ "${{ matrix.backend }}" == "opensearch1" ]]; then
            export OPENSEARCH_URL="http://localhost:9211"
          elif [[ "${{ matrix.backend }}" == "opensearch2" ]]; then
            export OPENSEARCH_URL="http://localhost:9212"
          fi

          python runtests.py --backend ${{ matrix.backend }}
